{"version":3,"file":"static/js/577.1a5779db.chunk.js","mappings":"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","sources":["components/Section/Section.tsx","components/NewsItem/NewsItem.tsx","components/NewsList/NewsList.tsx","views/NewsPage.tsx"],"sourcesContent":["interface ISection {\n  title?: string;\n  children: React.ReactNode;\n}\n\nfunction Section({ title, children }: ISection) {\n  return (\n    <div>\n      {title && <h2>{title}</h2>}\n      {children}\n    </div>\n  );\n}\n\nexport default Section;\n","import noImage from \"img/no-image-icon-23485.png\";\nimport { INews } from \"helpers/interfaces\";\nimport { Grid, Typography } from \"@mui/material\";\n\nconst NewsItem = ({ title, body, id }: INews) => {\n  return (\n    <Grid container direction=\"column\">\n      <Grid item sx={{ my: 1, mx: \"auto\", p: 2 }}>\n        <Typography variant=\"h4\" color=\"secondary\">\n          {title}\n        </Typography>\n        <Typography sx={{ textAlign: \"center\" }} variant=\"h6\">\n          ==={id}===\n        </Typography>\n      </Grid>\n      <Grid item container m={2} spacing={2}>\n        <Grid item>\n          <img src={noImage} alt={title} width=\"150\" height=\"150\" />\n        </Grid>\n        <Grid item xs={6} md={10}>\n          <Typography>{body}</Typography>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\nexport default NewsItem;\n","import { useTranslation } from \"react-i18next\";\nimport NewsItem from \"components/NewsItem\";\nimport { INewsProps } from \"helpers/interfaces\";\nimport { Grid } from \"@mui/material\";\nimport { Button } from \"components/LoginForm/LoginForm.styled\";\n\nconst NewsList = ({ posts, onDelete }: INewsProps) => {\n  const { t } = useTranslation();\n  return (\n    <Grid container mb={4}>\n      <Grid item>\n        {posts &&\n          posts.map((post) => (\n            <li key={post.id}>\n              <NewsItem title={post.title} id={post.id} body={post.body} />\n              <Button type=\"button\" onClick={() => onDelete(post.id)}>\n                {t(\"news.del\")}\n              </Button>\n            </li>\n          ))}\n      </Grid>\n    </Grid>\n  );\n};\nexport default NewsList;\n","import { useState, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { LinearProgress } from \"@mui/material\";\nimport Section from \"components/Section\";\nimport { useGetNewsQuery } from \"redux/newsAPI\";\nimport NewsList from \"components/NewsList\";\nimport { INews } from \"helpers/interfaces\";\nimport { Typography, Button, Paper } from \"@mui/material\";\n\nconst NewsPage = () => {\n  const ITEMS_PER_PAGE = 10; // Number of items to show per page\n  const { data: posts, isLoading } = useGetNewsQuery(); // fetch data from mockAPI posts\n  const { t } = useTranslation();\n\n  const [itemsPerPage] = useState(ITEMS_PER_PAGE);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsToShow, setItemsToShow] = useState<INews[]>([]);\n  const [allItems, setAllItems] = useState<INews[] | undefined>([]);\n\n  useEffect(() => {\n    setAllItems(posts);\n  }, [posts]);\n\n  // slice the items array to show only the items for the current page\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n\n  useEffect(() => {\n    const items = allItems?.slice(startIndex, endIndex);\n    if (!items) return;\n    setItemsToShow((prevItems) => [...prevItems, ...items]);\n  }, [allItems, itemsPerPage, currentPage, startIndex, endIndex]);\n\n  const loadMoreBtn = () => {\n    setCurrentPage(currentPage + 1);\n  };\n  const deleteOnePostById = (postId: string) => {\n    setItemsToShow((prevItems) =>\n      prevItems.filter((post: INews) => post.id !== postId)\n    );\n  };\n\n  if (!allItems) {\n    return (\n      <Section title=\"Today News\">\n        <div />\n      </Section>\n    );\n  }\n\n  return (\n    <>\n      <Section>\n        <Paper elevation={2}>\n          <Typography\n            variant=\"h3\"\n            // sx={{ fontSize: { xs: 24, md: 40 } }}\n            fontStyle=\"italic\"\n          >\n            {t(\"news.date\", { date: new Date() })}\n          </Typography>\n        </Paper>\n      </Section>\n      <Section>\n        {isLoading ? (\n          <>\n            <LinearProgress color=\"success\" />\n            <LinearProgress />\n          </>\n        ) : null}\n        <NewsList posts={itemsToShow} onDelete={deleteOnePostById} />\n\n        {allItems.length > ITEMS_PER_PAGE && (\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={loadMoreBtn}\n            disabled={Boolean(endIndex >= allItems?.length)}\n          >\n            {t(\"news.more\")}\n          </Button>\n        )}\n      </Section>\n    </>\n  );\n};\n\nexport default NewsPage;\n"],"names":["title","children","body","id","Grid","container","direction","item","sx","my","mx","p","Typography","variant","color","textAlign","m","spacing","src","alt","width","height","xs","md","posts","onDelete","t","useTranslation","mb","map","post","type","onClick","useGetNewsQuery","data","isLoading","useState","itemsPerPage","currentPage","setCurrentPage","itemsToShow","setItemsToShow","allItems","setAllItems","useEffect","startIndex","endIndex","items","slice","prevItems","Paper","elevation","fontStyle","date","Date","LinearProgress","postId","filter","length","Button","disabled","Boolean"],"sourceRoot":""}